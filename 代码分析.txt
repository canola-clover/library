【登录部分】
1.bean包中包含的是实体类：
	Admin		管理员
	Book		图书馆里面存储的数据类型
	Constant
	Lend		图书借阅里面存储的数据类型
	User		用户管理里面存储的数据类型
	
2.在theme包下，运行App.java，会启动应用：

-init()
  init()方法下，有一个多次调用的load(String module, String name)方法，这里涉及到module包，该包里面有
  多个子包，每个子包存放了对应的.fxml文件和.java文件。load的核心部分如下：
	try {
            ViewManager.getInstance().put(
                    name,
                    FXMLLoader.load(getClass().getResource("/com/bjpowernode/module/" + module + "/" + name + ".fxml"))
            );
            preloaderNotify();
        }
     这里的ViewManager创建了一个单例，然后调用put方法存入数据，实际上put方法第二个参数是加载了对应子包下的xxx.fxml文件
     
-start()
	调用了initialScene()
	initialScene(){
	...
	String log = logged();

        //decorator.setContent(ViewManager.getInstance().get("login"));
        if (log.equals("account") || log.equals("login")) {
            decorator.setContent(ViewManager.getInstance().get(log));
     ...
	}
	这一段ViewManager里面的一个HashMap对象会根据键值即log，返回对应的value，这里的log上
	可为“login”或“account”
	
3.查看login.java和login.fxml
  login.fxml:
  	用户名位于一个TextField中，用id = "username"唯一标识该组件
  	密码位于PasswordField中，用id="password"唯一标识该组件
  	登录唯一Button中，用id="login"唯一标识该组件
  	该文件和login.java关联，如登录按钮的onAction="#loginAction"对应login.java的loginAction方法
  	
 login.java:
 	-loginAction()
 	 输入信息，点击后用户登录后会触发该方法，里面调用了enter方法
 	 enter(){
 	   AdminService adminService = new AdminServiceImpl();
        Admin admin = adminService.get(username.getText());

        //检查是否输入了正确的用户名和密码
        if(admin.getUserName().equals(this.username.getText()) 
        && admin.getPassword().equals(this.password.getText())){...}
        ...}
        该方法通过输入的用户名先去查找本地存储的属性文件，即获取了真实的信息（用户名 + 密码），
        然后下面在if语句中将真实信息和输入的信息进行比对，如果信息匹配，就登录成功。
        
【数据持久化】：
原来：从user中的UserViewCtrl.java中可以看到，调用initialize()方法，其中展示的用户信息是使用
一个ObservableList对象存储的，该类继承了List类。

修改：在com.bjpowernode包下新建一个子包util，新建InitDataUtil.java文件。
该主类实现将User数据的存储。
	结构：
		main(){initUser(...);}
		initUser(List<User> userList)
		{
			1.创建存储的文件夹和文件，判断文件夹和文件是否存在
			2.程序 - > 文件，创建一个文件输出处理流，用于将数据输出到文件
			3.创建一个List<User> list 对象
				如果userList为空，直接向list中添加一个默认的User对象
				如果不为空，将userList赋值给list
			4.将list中的内容通过输出流输出到文件中，完成数据保存
		}	
	注意点：
		文件路径可设置为常量，方便在移植后修改 	

【代码分层】：
controller（请求处理层）：负责与界面数据进行交互
		此项目下主要是集中在model下的各个java文件

service（业务逻辑层）：负责业务逻辑相关处理，此项目中的service子包

DAO（Data Access Object）：负责数据持久化操作，自定义实现数据持久化
调用关系：controller -> service -> DAO
		
【查询功能】
dao层：
 -在com.bjpowernode包下新建一个子包dao，新建UserDao接口
  接口的抽象方法:List<User> select()
 -在dao层下创建子包impl，创建UserDao的实现类UserDaoImpl实现抽象方法
  select()
  {
  	创建一个ObjectInputSteam对象，并包装FileInputStream对象
  	读取本地存储的数据文件
  }
  
 service层：
  -在service子包下新建接口UserService，抽象方法仍为List<User> select()
  -在impl包下创建实现类UserServiceImpl，实现抽象方法
   这里的select方法可以创建UserDao对象，然后直接调用该对象的select方法

controller层：   
user子包：
 用户管理展示相关连的java文件为UserViewCtrl，修改该类的initialize方法
 需要增加一个UserService类型的成员变量。
 在初始化方法中，调用该成员变量的select方法得到用户数据列表，
 然后将用户数据列表全部赋值给用于界面展示的列表对象
 
 注意点：由于User类实现了Serializable接口，当某天需要给该对象增加一些
 	   新的成员变量时，可能导致原来被序列化的数据不能正确读取。因此应该
 	   给User类增加一个序列化的ID，用于标志序列化版本
 	   private static final的serialVersionUID值
 	   
 	   
【用户添加】：
	简单分析：
	 在 用户管理 一栏有添加功能，在UserView.fxml中可以找到 添加 按钮，它绑定了
	 userAddView方法，而该方法又调用了initStage方法，而在initStage方法中可以看到它加载了
	 UserHandleView.fxml，而这正是点击了添加按钮后对应的前端代码。查找姓名，余额，可以
	 看到该文本域的id值分别为userIdField和userNameField，它们均是UserHandleViewCtrl类
	 的成员变量。当填写了姓名和余额后，点击 提交 按钮，可以看到它会调用addorEditUser方法。
	 进入addorEditUser方法，它依据前台获取的userId是否为空执行添加或修改操作，用户状态默认
	 为正常，新增的User对象会添加到内存中users
	 
	代码改写：
	 -功能：将添加的User信息放入到文件中，关于UserId采用以下方式设置：若加载的本地用户数据不为空，采用
	 	List<User>对象中最后一个User对象的id + 1作为新User对象的id；若本地用户数据为空，则设置
	 	用户id为1001作为初始值。
	 	
	 -编写：
	  dao层:UserDao中新增抽象方法 void add(User user)
	  	实现方法：
	  		void add(User user)
	  		{
	  			1.从本地路径读入用户数据到程序，得到List<User>对象（反序列化）
	  			2.判断该对象是否为空：
	  				为空：新创建list<User>对象，设置新增User对象id为1001，并加入list
	  				不为空：获取list中最新的User对象，获取其id，加一后的结果作为新User对象
	  					  的id，加入到list
	  			3.将list对象重新写入到本地文件（序列化）
	  		}
	  service层：UserService接口新增 void add(User user)
			实现方法：直接调用UserDao对象的add方法
	  controller层：在UserHandleViewCtrl类创建UserService成员变量，调用该对象的add方法
	  
	  
【用户修改】：
  	-简单分析：
  	 UserView.fxml查找修改按钮，绑定了方法userEditView，当未选择要修改的用户信息时弹出警告，
  	 选中了进入initStage方法。UserViewCtrl.java中，该方法仍然加载UserHandleView.fxml，
  	 注意到有一句代码 controller.setUser(user) 当user不为空时，就会填充页面的用户信息用于
  	 修改。
  	 
  	-编写：
  	 dao层：UserDao新增 void update(User user)
  	 	实现：
  	 		void update(User user)
  	 		{
  	 			1.先加载本地用户数据，获取list<User>，判断是否为空
  	 			2.若不为空，则根据形参user的id查找在list中原来的User对象
  	 			3.设置原来的User对象的姓名、金额为user的姓名、金额
  	 		}
  	 service层：
  	 	UserService新增 void update(User user)
			直接调用UserDao对象的update方法
	controller层：在修改功能的代码块中调用userService成员变量的update方法
	
【用户删除】：
	分析思路同【用户修改】
	
	-编写：
	 dao层：UserDao新增 void delete(int id)
  	 	实现：
  	 		void delete(int id)
  	 		{
  	 			1.先加载本地用户数据，获取list<User>，判断是否为空
  	 			2.调用list的removeIf方法根据id删除User
  	 			3.将list写入本地文件  	 		}
  	 service层：
  	 	UserService新增 void delete(int id)
			直接调用UserDao对象的delete方法
	 controller层：在修改功能的代码块中调用userService成员变量的delete方法
	 		   本地删除操作应该在内存删除操作前面
	 		   
	 细节：由于删除操作设计到 本地删除和内存删除（用于展示），当本地删除操作发生异常时，
	 	 dao层的delete方法会捕获异常，而controller层的deleteUser无法捕获异常，因此
	 	 应该在dao层的异常捕获中增加 自定义的抛出异常。
	 	 同理增加、修改操作也应该做同样的操作
	 	 
	 错误：在这次编写中，犯了一个错误，就是自己使用了自动关闭资源的try语句，同时创建
	 	输出流和输入流，而导致多次删除失败，我忘记了一个最初的原则。
	 	正确顺序应该是：先利用输入流读取，执行完删除操作后，再【创建输出流】，然后将列表数据
	 				读到本地文件中
	 存在的问题：
	 	当用户数据全删光时，无法添加用户，错误提示
	 	java.lang.ArrayIndexOutOfBoundsException
	 	应为创建的List<User>对象是基于输入流的，故后续会考虑在输入流这里加判断条件
	 	
【用户冻结】：
	分析思路同【用户修改】
	
	-编写：
	 dao层：UserDao新增 void froze(int id)
  	 	实现：
  	 		void froze(int id)
  	 		{
  	 			1.先加载本地用户数据，获取list<User>，判断是否为空
  	 			2.根据id查找list中的User，将User的状态设置为冻结
  	 			3.将list写入本地文件  	 		}
  	 service层：
  	 	UserService新增 void froze(int id)
			直接调用UserDao对象的froze方法
	 controller层：在修改功能的代码块中调用userService成员变量的delete方法
	 		   本地删除操作应该在内存删除操作前面
	 		   
【初始化图书数据】：
	-简单分析：
	这一部分与用户数据初始化十分类似，在自定义util包下的InitDataUtil类中实现
	涉及的主要操作：
		从【指定路径】创建【文件夹】和【文件】
		创建输出流，将list<?>写入到本地文件
		注意要序列化的Book类需要实现Serializable类，并添加序列号
	
【图书查询】：
	-简单分析：
	 最开始，点击app的图书管理界面时应该展示所有的本地图书信息
	-编写
	 dao层：
	 	新建BookDao接口，抽象方法select，实现类BookDaoImpl
	 	List<Book> select(Book book)
	 	{
	 		1.读取本地数据，得到图书列表数据list
	 		2.若list不为空，且传入的book对象为空，则返回list；
	 		  否则执行查询：
	 		  2.1 书名和ISBN信息都有，则根据两种信息筛选
	 		  2.2 书名或ISBN信息只有一个，根据一个信息筛选
	 		▲ 注意 ""不等同于null
	 		3.list为空，返回一个空的list
	 	}
	 service层：
	 	新建BookServiceDao，抽象方法select，实现类BookServiceDaoImpl
	 	List<Book> select(Book book)
	 	{
	 		1.创建BookDao对象，调用该对象的select方法
	 	}
	controller层：
		在BookViewCtrl类中，bookSelect()方法负责查询，需要在这里创建一个
		BookService对象，将从表单中获得的查询信息创建一个Book对象，然后
		调用BookService对象的select方法查询，将查询结果传给展示列表即可


	



	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
     
     
     